#include "W25Q16.h"

W25Q16_FLASH::W25Q16_FLASH()
{
	//初始化FLASH大小
	FLASH_SIZE = W25Q16_SIZE;
	//初始化芯片类型
	W25QXX_TYPE = W25Q16;
	W25QXX_Init();
}

W25Q16_FLASH::~W25Q16_FLASH()
{
	
}
/*FLASH初始化*/
void W25Q16_FLASH::W25QXX_Init()
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	//使能GPIOB时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	  //GPIOB pin0 片选初始化
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;			
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		
	//推挽输出
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	//上拉
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);		
	
	//SPI FLASH不选中
	W25QXX_CS=1;	
	//初始化SPI,由于父类是SPI，不需要再次初始化
	//设置为42M时钟,高速模式 
	SPI1_SetSpeed(SPI_BaudRatePrescaler_2);		
	//读取FLASH ID.
	W25QXX_TYPE=W25QXX_ReadID();				
}
/*读取状态寄存器*/
u8 W25Q16_FLASH::W25QXX_ReadSR(void)   
{  
	u8 byte=0;   
	//使能器件 
	W25QXX_CS=0;                              
	//写入BYTE1指令
	SPI1_ReadWriteByte(W25X_ReadStatusReg);    
	//表示空闲，读取一个字节
	byte=SPI1_ReadWriteByte(0Xff);             
	//取消片选   
	W25QXX_CS=1;                              
	return byte;   
}
/*写入状态寄存器（S0 - S7）*/
void W25Q16_FLASH::W25QXX_Write_SR(u8 sr)   
{   
	W25QXX_CS=0;                         
	//发送写取状态寄存器命令  
	SPI1_ReadWriteByte(W25X_WriteStatusReg);     
	//写入一个字节  
	SPI1_ReadWriteByte(sr);               
	W25QXX_CS=1;                               	      
}
/****
 *读取状态寄存器
 *W25Q16写使能	
 *将WEL置位
***/
void W25Q16_FLASH::W25QXX_Write_Enable(void)   
{
	W25QXX_CS=0;                            
	//发送写使能  
    SPI1_ReadWriteByte(W25X_WriteEnable);      
	W25QXX_CS=1;                                 	      
}  
/****
 *W25QXX写禁止
 *将WEL清零	
***/
void W25Q16_FLASH::W25QXX_Write_Disable(void)   
{  
	W25QXX_CS=0;                        
	//发送写禁止指令        
    SPI1_ReadWriteByte(W25X_WriteDisable);    
	W25QXX_CS=1;                             	      
} 		
/****
 *读取芯片ID
 *返回值如下:				   
 *0XEF13,表示芯片型号为W25Q80  
 *0XEF14,表示芯片型号为W25Q16    
 *0XEF15,表示芯片型号为W25Q32  
 *0XEF16,表示芯片型号为W25Q64 
 *0XEF17,表示芯片型号为W25Q128 	  
***/
u16 W25Q16_FLASH::W25QXX_ReadID(void)
{
	u16 Temp = 0;	  
	W25QXX_CS=0;			
	//发送读取ID命令	
	SPI1_ReadWriteByte(0x90);
	//24位地址为00h
	SPI1_ReadWriteByte(0x00); 	    
	SPI1_ReadWriteByte(0x00); 	    
	SPI1_ReadWriteByte(0x00); 	 	
	//16位的数据，先从MSB开始读，左移八位最后读到LSB，
	//输入0xff表示空闲，可接收来自FLASH的数据
	Temp|=SPI1_ReadWriteByte(0xFF)<<8;  
	Temp|=SPI1_ReadWriteByte(0xFF);	 
	W25QXX_CS=1;				    
	return Temp;
} 
/****
 *读取SPI FLASH  
 *在指定地址开始读取指定长度的数据
 *pBuffer:数据存储区
 *ReadAddr:开始读取的地址(24bit)
 *NumByteToRead:要读取的字节数(最大65535)
***/
void W25Q16_FLASH::W25QXX_Read(u8* pBuffer,u32 ReadAddr,u16 NumByteToRead)   
{ 
 	u16 i;   										   
	//使能器件  	
	W25QXX_CS=0;                     
	//发送读取命令   
    SPI1_ReadWriteByte(W25X_ReadData);
	//发送24bit地址（从MSB到LSB发）    	
    SPI1_ReadWriteByte((u8)((ReadAddr)>>16));  
    SPI1_ReadWriteByte((u8)((ReadAddr)>>8));   
    SPI1_ReadWriteByte((u8)ReadAddr);
	//读完为止
    for(i=0;i<NumByteToRead;i++)
	{ 
		//循环读数
        pBuffer[i]=SPI1_ReadWriteByte(0XFF);   
    }
	W25QXX_CS=1;  				    	      
}  
/****
 *SPI在一页(0~65535)内写入少于256个字节的数据
 *在指定地址开始写入最大256字节的数据
 *pBuffer:数据存储区
 *WriteAddr:开始写入的地址(24bit)
 *NumByteToWrite:要写入的字节数(最大256)
 *该数不应该超过该页的剩余字节数
 *每一个扇区的字节数：00h -> ffh
***/
void W25Q16_FLASH::W25QXX_Write_Page(u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)
{
 	u16 i;  
	//SET WEL
    W25QXX_Write_Enable();                  
	W25QXX_CS=0;       
	//发送写页命令   
    SPI1_ReadWriteByte(W25X_PageProgram);
	//发送24bit地址   
    SPI1_ReadWriteByte((u8)((WriteAddr)>>16));  
    SPI1_ReadWriteByte((u8)((WriteAddr)>>8));   
    SPI1_ReadWriteByte((u8)WriteAddr);   
	//循环写数  
    for(i=0;i<NumByteToWrite;i++)
		SPI1_ReadWriteByte(pBuffer[i]);
	W25QXX_CS=1;
	//等待写入结束
	W25QXX_Wait_Busy();					   
} 
/****
 *无检验写SPI FLASH 
 *必须确保所写的地址范围内的数据全部为0XFF,否则在非0XFF处写入的数据将失败!
 *具有自动换页功能 
 *在指定地址开始写入指定长度的数据,但是要确保地址不越界!
 *pBuffer:数据存储区
 *WriteAddr:开始写入的地址(24bit)
 *NumByteToWrite:要写入的字节数(最大65535)
 *CHECK OK
***/
void W25Q16_FLASH::W25QXX_Write_NoCheck(u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)   
{ 			 		 
	u16 pageremain;	   
	//单页剩余的字节数
	pageremain=256-WriteAddr%256; 		 	    
	if(NumByteToWrite<=pageremain)
		//不大于256个字节
		pageremain=NumByteToWrite;
	while(1)
	{	   
		W25QXX_Write_Page(pBuffer,WriteAddr,pageremain);
		//写入结束
		if(NumByteToWrite==pageremain)
			break;
		//NumByteToWrite>pageremain
	 	else 
		{
			pBuffer += pageremain;
			WriteAddr += pageremain;	

			//减去已经写入了的字节数
			NumByteToWrite -= pageremain;			  
			//一次可以写入256个字节
			if(NumByteToWrite>256)
				pageremain = 256; 
			//不够256个字节了
			else 
				pageremain = NumByteToWrite; 	  
		}
	};	    
} 
/****
 *写SPI FLASH  
 *在指定地址开始写入指定长度的数据
 *该函数带擦除操作!
 *pBuffer:数据存储区
 *WriteAddr:开始写入的地址(24bit)						
 *NumByteToWrite:要写入的字节数(最大65535) 
***/
u8 		W25QXX_BUFFER[4096];		 
void W25Q16_FLASH::W25QXX_Write(u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)   
{ 
	u32 secpos;
	u16 secoff;
	u16 secremain;	   
 	u16 i;    
	u8 * W25QXX_BUF;
	
   	W25QXX_BUF 	= 	W25QXX_BUFFER;	     
	//获取扇区地址  
 	secpos		=	WriteAddr/4096;
	//在扇区内的偏移
	secoff		=	WriteAddr%4096;
	//扇区剩余空间大小
	secremain	=	4096 - secoff;
	//不大于4096个字节
 	if(NumByteToWrite<=secremain)
		secremain=NumByteToWrite;
	while(1) 
	{	
		//读出整个扇区的内容
		W25QXX_Read(W25QXX_BUF,secpos*4096,4096);
		for(i=0;i<secremain;i++)//校验数据
		{
			if(W25QXX_BUF[secoff+i]!=0XFF)
				break;//需要擦除  	  
		}
		if(i<secremain)//需要擦除
		{
			W25QXX_Erase_Sector(secpos);//擦除这个扇区
			for(i=0;i<secremain;i++)	   //复制
			{
				W25QXX_BUF[i+secoff]=pBuffer[i];	  
			}
			W25QXX_Write_NoCheck(W25QXX_BUF,secpos*4096,4096);//写入整个扇区  

		}else W25QXX_Write_NoCheck(pBuffer,WriteAddr,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
		if(NumByteToWrite==secremain)break;//写入结束了
		else//写入未结束
		{
			secpos++;//扇区地址增1
			secoff=0;//偏移位置为0 	 

		   	pBuffer+=secremain;  //指针偏移
			WriteAddr+=secremain;//写地址偏移	   
		   	NumByteToWrite-=secremain;				//字节数递减
			if(NumByteToWrite>4096)secremain=4096;	//下一个扇区还是写不完
			else secremain=NumByteToWrite;			//下一个扇区可以写完了
		}	 
	};	 
}
/****
 *擦除整个芯片		  
 *等待时间超长...
***/
void W25Q16_FLASH::W25QXX_Erase_Chip(void)   
{                                   
    W25QXX_Write_Enable();                  //SET WEL 
    W25QXX_Wait_Busy();   
  	W25QXX_CS=0;                            //使能器件   
    SPI1_ReadWriteByte(W25X_ChipErase);        //发送片擦除命令  
	W25QXX_CS=1;                            //取消片选     	      
	W25QXX_Wait_Busy();   				   //等待芯片擦除结束
}   
/****
 *擦除一个扇区
 *Dst_Addr:扇区地址 根据实际容量设置
 *擦除一个扇区的最少时间:150ms
***/
void W25Q16_FLASH::W25QXX_Erase_Sector(u32 Dst_Addr)   
{  
	//监视falsh擦除情况,测试用   
 	//printf("fe:%x\r\n",Dst_Addr);	  
 	Dst_Addr *= 4096;
    W25QXX_Write_Enable();                  //SET WEL 	 
    W25QXX_Wait_Busy();   
  	W25QXX_CS=0;                            //使能器件   
    SPI1_ReadWriteByte(W25X_SectorErase);      //发送扇区擦除指令 
    SPI1_ReadWriteByte((u8)((Dst_Addr)>>16));  //发送24bit地址    
    SPI1_ReadWriteByte((u8)((Dst_Addr)>>8));   
    SPI1_ReadWriteByte((u8)Dst_Addr);  
	W25QXX_CS=1;                            //取消片选     	      
    W25QXX_Wait_Busy();   				   //等待擦除完成
}  
/*等待空闲*/
void W25Q16_FLASH::W25QXX_Wait_Busy(void)   
{   // 等待BUSY位(S0)清零
	while((W25QXX_ReadSR()&0x01)==0x01);   
}  
//进入掉电模式
void W25Q16_FLASH::W25QXX_PowerDown(void)   
{ 
  	W25QXX_CS=0;                            //使能器件   
    SPI1_ReadWriteByte(W25X_PowerDown);        //发送掉电命令  
	W25QXX_CS=1;                            //取消片选     	      
    delay_us(3);                               //等待TPD  
}   
/*唤醒*/
void W25Q16_FLASH::W25QXX_WAKEUP(void)   
{  
  	W25QXX_CS=0;                            //使能器件   
    SPI1_ReadWriteByte(W25X_ReleasePowerDown);   //  send W25X_PowerDown command 0xAB    
	W25QXX_CS=1;                            //取消片选     	      
    delay_us(3);                               //等待TRES1
}   
/*通过输入扇区编号来写数据*/
u32 W25Q16_FLASH::SECTOR_ID(u8 sector_id)
{
	sector_id *= 4096;
	return sector_id;
}
