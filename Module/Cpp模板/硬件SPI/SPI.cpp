#include "SPI.h"
#include "LCD_CPP.h"
SPI::SPI()
{
	SPI1_Init();
}

SPI::~SPI()
{
	
}
/****
 *以下是SPI模块的初始化代码，配置成主机模式 						  
 *SPI口初始化
 *这里针是对SPI1的初始化
***/
void SPI::SPI1_Init()
{	 
	GPIO_InitTypeDef  GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	//使能SPI1时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

	//GPIOFB3,4,5初始化设置，PB3~5复用功能输出	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	//推挽输出
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	//100MHz
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	//上拉
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	//PB3复用为 SPI1
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource3,GPIO_AF_SPI1); 
	//PB4复用为 SPI1
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource4,GPIO_AF_SPI1); 
	//PB5复用为 SPI1
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource5,GPIO_AF_SPI1); 

	//这里只针对SPI口初始化，复位SPI1
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1,ENABLE);
	//停止复位SPI1
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1,DISABLE);
	//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  
	//设置SPI工作模式:设置为主SPI
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		
	//设置SPI的数据大小:SPI发送接收8位帧结构
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;		
	//串行同步时钟的空闲状态为高电平
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;		
	//串行同步时钟的第二个跳变沿（上升或下降）数据被采样
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;	
	//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;		
	//定义波特率预分频的值:波特率预分频值为256
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;		
	//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	
	//CRC值计算的多项式
	SPI_InitStructure.SPI_CRCPolynomial = 7;	
	//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器
	SPI_Init(SPI1, &SPI_InitStructure);  
	//使能SPI外设
	SPI_Cmd(SPI1, ENABLE); 
	//空闲状态电平都是高，相当于传输启动
	SPI1_ReadWriteByte(0xff);	 
}   
/****SPI1速度设置函数
 *SPI速度=fAPB2/分频系数
 *@ref SPI_BaudRate_Prescaler:SPI_BaudRatePrescaler_2~SPI_BaudRatePrescaler_256  
 *fAPB2时钟一般为84Mhz：
***/
void SPI::SPI1_SetSpeed(u8 SPI_BaudRatePrescaler)
{
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
	SPI1->CR1&=0XFFC7;//位3-5清零，用来设置波特率
	SPI1->CR1|=SPI_BaudRatePrescaler;	//设置SPI1速度 
	SPI_Cmd(SPI1,ENABLE); //使能SPI1
} 
/****
 *SPI1 读写一个字节
 *TxData:要写入的字节
 *返回值:读取到的字节
***/
u8 SPI::SPI1_ReadWriteByte(u8 TxData)
{		 			 
 //等待发送区空  
  while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET){}
	//通过外设SPIx发送一个byte  数据
	SPI_I2S_SendData(SPI1, TxData); 
  //等待接收完一个byte
  while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET){}   
	//返回通过SPIx最近接收的数据	
	return SPI_I2S_ReceiveData(SPI1); 
}
